name: Check for new ETLegacy x86_64 Build

on:
  schedule:
    - cron: '0 0 * * *'  # Runs every day at midnight
  workflow_dispatch:      # Allows manual triggering

jobs:
  check-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: sudo apt-get install -y curl htmlq

      - name: Fetch ETLegacy webpage
        run: curl -s https://www.etlegacy.com/workflow-files > page.html

      - name: Extract latest x86_64 build URL
        id: extract_url
        run: |
          # Extract the x86_64 .tar.gz link using htmlq (requires jq and htmlq installed)
          FILE_URL=$(cat page.html | htmlq --attribute href a | grep 'x86_64.tar.gz' | head -n 1)
          echo "::set-output name=file_url::$FILE_URL"

      - name: Extract build version
        id: extract_version
        run: |
          FILE_NAME=$(basename "${{ steps.extract_url.outputs.file_url }}")
          VERSION=$(echo $FILE_NAME | sed 's/.*-\(.*\)-x86_64.tar.gz/\1/')
          echo "::set-output name=version::$VERSION"

      - name: Check if build already exists
        id: check_existing
        run: |
          FILE_NAME=$(basename "${{ steps.extract_url.outputs.file_url }}")
          if [ -f "./$FILE_NAME" ]; then
            echo "Build already exists, skipping."
            echo "::set-output name=exists::true"
          else
            echo "Build does not exist, downloading."
            echo "::set-output name=exists::false"
          fi

      - name: Download new build
        if: steps.check_existing.outputs.exists == 'false'
        run: |
          curl -L ${{ steps.extract_url.outputs.file_url }} -o ${{ steps.extract_url.outputs.file_url | split('/')[-1] }}

      - name: Commit new build
        if: steps.check_existing.outputs.exists == 'false'
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git add ${{ steps.extract_url.outputs.file_url | split('/')[-1] }}
          git commit -m "New build ${{ steps.extract_version.outputs.version }}"
          git push
